%%%-------------------------------------------------------------------
%%% @author Mark <>
%%% @copyright (C) 2013, Mark
%%% @doc
%%%
%%% @end
%%% Created : 10 Nov 2013 by Mark <>
%%%-------------------------------------------------------------------
-module(sslv2encoder).

-export([encode/1,encode/2]).
-include("sslv2.hrl").

encode(Rec)->
    {PacketType,Payload} = encode_record(Rec),
    encode_theader(PacketType,Payload).

encode(Rec,EncryptInfo)->
    Bin = encode(Rec),
    encrypt(Bin,EncryptInfo).
encrypt(Bin,#rsa_encrypt{public = Pub})->
    crypto:public_encrypt(rsa,Bin,Pub,rsa_pkcs1_padding);
encrypt(Bin,#aes_encrypt{state=State} = AES) ->
    {NewState,Cipher} = crypto:stream_encrypt(State,Bin),
    {AES#aes_encrypt{state=NewState},Cipher}.


encode_record(#packet_response{code=Code})->
    {?PT_PACKET_RESPONSE,<<Code:8>>};
encode_record(#change_keyspec{public_rsa = [E,N]}) ->
    PubExpBin = binary:encode_unsigned(E,little),
    ModulusBin = binary:encode_unsigned(N,little),
    ModulusSize = binary:encode_unsigned(byte_size(ModulusBin),little),
	{?PT_CHANGE_KEY_SPEC,list_to_binary([ModulusSize,ModulusBin,PubExpBin])};
encode_record(Other)->
    error({encode_record,unknown_clause,[Other]}).

encode_theader(PacketType,Payload)->
    <<?PROTOCOL_LABEL:16/little-integer,
      PacketType:8,
      (byte_size(Payload)):16/little-integer,Payload/binary>>.
